@startuml STSAFE-A110_Device_authentication.png
    :MAIN;
    :Initialize Apps terminal (baudrate = 115200)]
    :Print example title and instructions]
    :ret = <b>stse_init</b>|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif

    :ret = <b>stse_get_device_certificate_size</b>|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
    
    :ret = <b>stse_get_device_certificate</b>|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
            
    :print <b>"Device Certificate"</b>]
    
    :ret = <b>stse_device_authenticate</b>|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
    
    while (while(1) )
    end while
    -[hidden]->
    detach      
@enduml
@startuml Echo_loop_Example_flowchart.png
    :MAIN;
    :Initialize apps terminal (baudrate = 115200)]
    :Print example title and instructions]
    :ret = <b>stse_init</b>|
  if(ret == STSE_OK) then (No)
    :Print Error ]
    :STOP;
        -[hidden]->
    detach
  else (Yes)
    while (while(1))
      :Create randomized "<b>Message</b>" length and content ]
      :Print <b>"Message"</b>]
      :ret = <b>stse_device_echo</b>|
      if(ret == STSE_OK) then (Yes)
      :print <b>"Echoed message"</b>]
      :Wait 1s]
      else (No)
      :Print Error ]
      :STOP;
        -[hidden]->
      detach
      endif
    end while
    -[hidden]->
      detach
  endif
@enduml
@startuml STSAFE-A110_Host_key_provisioning.png
    :MAIN;
    :Initialize apps terminal]
    :Initialize STSE device (addr 0x20)]
    :print Host MAC and Host Cipher keys]
    :print WARNING about the lock of target slot]
    :ret = stse_host_key_provisioning|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :print ERROR]
        -[hidden]->
        detach
    endif
    :print "stse_host_key_provisioning : PASS"]
    while (while(1))
    end while
    -[hidden]->
    detach
@enduml
@startuml STSAFE-A110_Multi-step_device_authentication.png
    :MAIN;
    :Initialize Apps terminal (baudrate = 115200)]
    :Print example title and instructions]
    :ret = <b>stse_init</b>|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
    
    :ret = <b>stse_certificate_parse</b>(CA certificate)|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif

    :<b>stse_certificate_print_parsed_cert</b> (parsed CA certificate)|

    :ret = <b>stse_get_device_certificate</b>|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif

    :ret = <b>stse_certificate_parse</b> (device certificate)|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif

    :<b>stse_certificate_print_parsed_cert</b> (parsed device certificate)|
    
    :ret = <b>stse_certificate_is_parent</b> (parsed CA certificate,parsed device certificate)|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif

    :keytype = <b>stse_certificate_get_key_type (parsed device certificate)</b>|
    :Generate challenge (keytype) ]
    :ret = <b>stse_ecc_generate_signature</b> (keytype)|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR ]
        -[hidden]->
        detach
    endif

    :Print signature ]
    :ret=<b>stse_certificate_verify_signature</b> (keytype) |
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print Error ]
        -[hidden]->
        detach
    endif
    :Print "<b>Device Authenticated</b>" ]
    while (while(1) )
    end while
    -[hidden]->
    detach
@enduml
@startuml STSAFE-A110_Random_number_generation.png
    :MAIN;
    :Initialize UART (baudrate = 115200)]
    :Print example title and instructions]
    :Initialize STSAFE device]
    :Generate random number with STSAFE-A110]
    :Print the random number]

    while (while(1) )
    end while
    -[hidden]->
    detach
@enduml
@startuml STSAFE-A110_secure_data_storage_zone_access.png
    :MAIN;
    :Initialize Apps terminal (baudrate = 115200)]
    :Print example title and instructions]
    :ret = <b>stse_init</b>|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
    
    :Print data partition record table]
    
    :ret = <b>stse_data_storage_read_counter</b> (
    \tzone 5 , 
    \toffset 0 , 
    \tsize of associated buffer
    )|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
    
    :Print counter value and associated data]
    
    :Randomize associated data buffer]
    
    :ret = <b>stse_data_storage_decrement_counter</b> (
    \tzone 5 , 
    \amount 1,
    \toffset 0 , 
    \tassociated data buffer,
    \tsize of associated buffer
    )|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
    :Print new counter value ]
    
    :ret = <b>stse_data_storage_read_counter</b> (
    \tzone 5 , 
    \toffset 0 , 
    \tsize of associated buffer
    )|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
    
    :Print counter value and associated data]
    
    while (while(1) )
    end while
    -[hidden]->
    detach
@enduml
@startuml STSAFE-A110_secure_data_storage_zone_access.png
    :MAIN;
    :Initialize Apps terminal (baudrate = 115200)]
    :Print example title and instructions]
    :ret = <b>stse_init</b>|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
    
    :Print data partition record table]
    
    :ret = <b>stse_data_storage_read_zone</b> (
    \tzone 1 , 
    \toffset 0 , 
    \tsize of read buffer
    )|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
    
    :Print read buffer]
    :Randomize write buffer]
    
    :ret = <b>stse_data_storage_update_zone</b> (
    \tzone 1 ,
    \toffset 0 , 
    \twrite buffer,
    \tsize of write buffer
    )|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
    :Print write buffer ]
    
    :ret = <b>stse_data_storage_read_zone</b> (
    \tzone 1 , 
    \toffset 0 , 
    \tsize of read buffer
    )|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
    
    :Print read buffer]
    
    while (while(1) )
    end while
    -[hidden]->
    detach
@enduml
@startuml STSAFE-A110_Symmetric_key_AES-128_CMAC.png
    :MAIN;
    :Initialize UART (baudrate = 115200)]
    :Print example title and instructions]
    :Initialize STSAFE device]
    :Print symmetric key table info]
    :Compute MAC over message with the STSAFE-A API]
    :Verify MAC over message with the STSAFE-A API]
    while (while(1))
    end while
    -[hidden]->
    detach
@enduml
@startuml STSAFE-A110_wrap_unwrap.png
    :MAIN;
    :Initialize Apps terminal (baudrate = 115200)]
    
    :Print example title and instructions]
    
    :ret = <b>stse_init</b>|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif

    :ret = <b>stsafea_generate_wrap_unwrap_key</b>|
    if((ret != STSE_OK) && (ret != STSE_ACCESS_CONDITION_NOT_SATISFIED)) then (yes)
        :Print ERROR]
        -[hidden]->
        detach
    (No) else if (ret != STSE_ACCESS_CONDITION_NOT_SATISFIED) then (Yes)
        :Print "New key provisioned"]
    else(No)
    endif
    
    :Print plain-text payload]

    :<b>stsafea_session_handler_allocate</b>]

    :ret = <b>stsafea_open_host_session</b>|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif   

    :ret = <b>stsafea_wrap_payload</b> (key 0 , plain-text payload) |
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif   

    :ret = <b>stsafea_wrap_payload</b> (key 0 , plain-text payload) |
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif   

    :Print wrapped payload]


    :ret = <b>stsafea_unwrap_payload</b> (key 0 , wrapped payload) |
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif   

    :Print un-wrapped payload]

    while (while(1) )
    end while
    -[hidden]->
    detach
@enduml
@startuml STSAFE-A120_Device_authentication.png
    :MAIN;
    :Initialize Apps terminal (baudrate = 115200)]
    :Print example title and instructions]
    :ret = <b>stse_init</b>|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif

    :ret = <b>stse_get_device_certificate_size</b>|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
    
    :ret = <b>stse_get_device_certificate</b>|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
            
    :print <b>"Device Certificate"</b>]
    
    :ret = <b>stse_device_authenticate</b>|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif   
    
    while (while(1) )
    end while
    -[hidden]->
    detach      
@enduml
@startuml Echo_loop_Example_flowchart.png
    :MAIN;
    :Initialize apps terminal (baudrate = 115200)]
    :Print example title and instructions]
    :ret = <b>stse_init</b>|
  if(ret == STSE_OK) then (No)
    :Print Error ]
    :STOP;
        -[hidden]->
    detach
  else (Yes)
    while (while(1))
      :Create randomized "<b>Message</b>" length and content ]
      :Print <b>"Message"</b>]
      :ret = <b>stse_device_echo</b>|
      if(ret == STSE_OK) then (Yes)
      :print <b>"Echoed message"</b>]
      :Wait 1s]
      else (No)
      :Print Error ]
      :STOP;
        -[hidden]->
      detach
      endif
    end while
    -[hidden]->
      detach
  endif
@enduml
@startuml STSAFE-A120_Hash.png
    :MAIN;
    : Initialize apps terminal]
    :Initialize STSAFE device (addr 0x20) ]
    while (while(1))
    end while
    -[hidden]->
    detach
@enduml
@startuml STSAFE-A120_Get_product_information.png
    skinparam sequenceMessageAlign center
    participant HOST order 1
    participant STSAFE order 2
    rnote over HOST: Initialize STSAFE device handler\n (STSAFE-A120 ; addr 0x20)
    

    end
@enduml
@startuml STSAFE-A120_Host_key_provisioning.png
    :MAIN;
    :Initialize apps terminal]
    :Initialize STSE device (addr 0x20)]
    :print Host MAC and Host Cipher keys]
    :ret = stsafea_query_host_key_provisioning_ctrl_fields|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :print ERROR]
        -[hidden]->
        detach
    endif
    :print Host key provisioning control fields]
    :print WARNING about the lock of target slot]
    if(provisioning_ctrl_fields.change_right == 0) then (No)
        :stsafea_put_host_key_provisioning_ctrl_fields|
        if(ret != STSE_OK) then (No)
        else (Yes)
            :print ERROR]
            -[hidden]->
            detach
        endif
    else (Yes)
        if(provisioning_ctrl_fields.reprovision == 0) then (No)
            :print "control fields already set"]
        else (Yes)
            :print ERROR]
            -[hidden]->
            detach
        endif
    endif
    :ret = stse_host_key_provisioning|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :print ERROR]
        -[hidden]->
        detach
    endif
    :print "stse_host_key_provisioning : PASS"]
    while (while(1))
    end while
    -[hidden]->
    detach
@enduml
@startuml STSAFE-A120_Host_key_provisioning_wrapped.png
    :MAIN;
    :Initialize apps terminal]
    :Initialize STSE device (addr 0x20)]
    :print Host MAC and Host Cipher keys]
    :ret = stsafea_query_host_key_provisioning_ctrl_fields|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :print ERROR]
        -[hidden]->
        detach
    endif
    :print Host key provisioning control fields]
    :print WARNING about the lock of target slot]
    if(provisioning_ctrl_fields.change_right == 0) then (No)
        :stsafea_put_host_key_provisioning_ctrl_fields|
        if(ret != STSE_OK) then (No)
        else (Yes)
            :print ERROR]
            -[hidden]->
            detach
        endif
    else (Yes)
        if(provisioning_ctrl_fields.reprovision == 0) then (No)
            :print "control fields already set"]
        else (Yes)
            :print ERROR]
            -[hidden]->
            detach
        endif
    endif
    :ret = stse_host_key_provisioning_wrapped|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :print ERROR]
        -[hidden]->
        detach
    endif
    :print "stse_host_key_provisioning_wrapped : PASS"]
    while (while(1))
    end while
    -[hidden]->
    detach
@enduml
@startuml STSAFE-A120_Multi-step_device_authentication.png
    :MAIN;
    :Initialize Apps terminal (baudrate = 115200)]
    :Print example title and instructions]
    :ret = <b>stse_init</b>|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
    
    :ret = <b>stse_certificate_parse</b>(CA certificate)|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif

    :<b>stse_certificate_print_parsed_cert</b> (parsed CA certificate)|

    :ret = <b>stse_get_device_certificate</b>|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif

    :ret = <b>stse_certificate_parse</b> (device certificate)|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif

    :<b>stse_certificate_print_parsed_cert</b> (parsed device certificate)|
    
    :ret = <b>stse_certificate_is_parent</b> (parsed CA certificate,parsed device certificate)|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif

    :keytype = <b>stse_certificate_get_key_type (parsed device certificate)</b>|
    :Generate challenge (keytype) ]
    :ret = <b>stse_ecc_generate_signature</b> (keytype)|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR ]
        -[hidden]->
        detach
    endif

    :Print signature ]
    :ret=<b>stse_certificate_verify_signature</b> (keytype) |
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print Error ]
        -[hidden]->
        detach
    endif
    :Print "<b>Device Authenticated</b>" ]
    while (while(1) )
    end while
    -[hidden]->
    detach
@enduml
@startuml STSAFE-A120_Random_number_generation.png
    :MAIN;
    :Initialize UART (baudrate = 115200)]
    :Print example title and instructions]
    :Initialize STSAFE device]
    :Generate random number with STSAFE-A120]
    :Print the random number]

    while (while(1) )
    end while
    -[hidden]->
    detach
@enduml
@startuml STSAFE-A120_secure_data_storage_zone_access.png
    :MAIN;
    :Initialize Apps terminal (baudrate = 115200)]
    :Print example title and instructions]
    :ret = <b>stse_init</b>|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
    
    :Print data partition record table]
    
    :ret = <b>stse_data_storage_read_counter</b> (
    \tzone 5 , 
    \toffset 0 , 
    \tsize of associated buffer
    )|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
    
    :Print counter value and associated data]
    
    :Randomize associated data buffer]
    
    :ret = <b>stse_data_storage_decrement_counter</b> (
    \tzone 5 , 
    \amount 1,
    \toffset 0 , 
    \tassociated data buffer,
    \tsize of associated buffer
    )|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
    :Print new counter value ]
    
    :ret = <b>stse_data_storage_read_counter</b> (
    \tzone 5 , 
    \toffset 0 , 
    \tsize of associated buffer
    )|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
    
    :Print counter value and associated data]
    
    while (while(1) )
    end while
    -[hidden]->
    detach
@enduml
@startuml STSAFE-A120_secure_data_storage_zone_access.png
    :MAIN;
    :Initialize Apps terminal (baudrate = 115200)]
    :Print example title and instructions]
    :ret = <b>stse_init</b>|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
    
    :Print data partition record table]
    
    :ret = <b>stse_data_storage_read_zone</b> (
    \tzone 1 , 
    \toffset 0 , 
    \tsize of read buffer
    )|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
    
    :Print read buffer]
    :Randomize write buffer]
    
    :ret = <b>stse_data_storage_update_zone</b> (
    \tzone 1 ,
    \toffset 0 , 
    \twrite buffer,
    \tsize of write buffer
    )|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
    :Print write buffer ]
    
    :ret = <b>stse_data_storage_read_zone</b> (
    \tzone 1 , 
    \toffset 0 , 
    \tsize of read buffer
    )|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif
    
    :Print read buffer]
    
    while (while(1) )
    end while
    -[hidden]->
    detach
@enduml
@startuml STSAFE-A120_Symmetric_key_establishment_AES-128_CMAC.png
    :MAIN;
    :Initialize UART (baudrate = 115200)]
    :Print example title and instructions]
    :Initialize STSAFE device]
    :Ask user to enter a slot number]
    :Establish AES-128 CMAC key in selected slot]
    :Compute MAC over message with the STSAFE-A API]
    :Verify MAC over message with the STSAFE-A Platform]

    while (while(1) )
    end while
    -[hidden]->
    detach
@enduml
@startuml STSAFE-A120_Symmetric_key_establishment_AES-256_CCM.png
    :MAIN;
    :Initialize UART (baudrate = 115200)]
    :Print example title and instructions]
    :Initialize STSAFE device]
    :Ask user to enter a slot number]
    :Establish AES-256 CCM* key in selected slot]
    :Encrypt message with the STSAFE-A API]
    :Decrypt message with the STSAFE-A Platform]

    while (while(1) )
    end while
    -[hidden]->
    detach
@enduml
@startuml STSAFE-A120_Symmetric_key_management_AES-128_CMAC.png
    :MAIN;
    :Initialize UART (baudrate = 115200)]
    :Print example title and instructions]
    :Initialize STSAFE device]
    :Ask user to enter a slot number]
    :Write AES-128 CMAC key in selected slot]
    :Compute MAC over message with the STSAFE-A API]
    :Verify MAC over message with the STSAFE-A API]

    while (while(1) )
    end while
    -[hidden]->
    detach
@enduml
@startuml STSAFE-A120_Symmetric_key_management_AES-256_CCM.png
    :MAIN;
    :Initialize UART (baudrate = 115200)]
    :Print example title and instructions]
    :Initialize STSAFE device]
    :Ask user to enter a slot number]
    :Write AES-256 CCM* key in selected slot]
    :Encrypt message with the STSAFE-A API]
    :Decrypt message with the STSAFE-A API]

    while (while(1) )
    end while
    -[hidden]->
    detach
@enduml
@startuml STSAFE-A120_wrap_unwrap.png
    :MAIN;
    :Initialize Apps terminal (baudrate = 115200)]
    
    :Print example title and instructions]
    
    :ret = <b>stse_init</b>|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif

    :ret = <b>stsafea_generate_wrap_unwrap_key</b>|
    if((ret != STSE_OK) && (ret != STSE_ACCESS_CONDITION_NOT_SATISFIED)) then (yes)
        :Print ERROR]
        -[hidden]->
        detach
    (No) else if (ret != STSE_ACCESS_CONDITION_NOT_SATISFIED) then (Yes)
        :Print "New key provisioned"]
    else(No)
    endif
    
    :Print plain-text payload]

    :<b>stsafea_session_handler_allocate</b>|

    :ret = <b>stsafea_open_host_session</b>|
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif   

    :ret = <b>stsafea_wrap_payload</b> (key 0 , plain-text payload) |
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif   

    :ret = <b>stsafea_wrap_payload</b> (key 0 , plain-text payload) |
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif   

    :Print wrapped payload]


    :ret = <b>stsafea_unwrap_payload</b> (key 0 , wrapped payload) |
    if(ret != STSE_OK) then (No)
    else (Yes)
        :Print ERROR]
        -[hidden]->
        detach
    endif   

    :Print un-wrapped payload]

    while (while(1) )
    end while
    -[hidden]->
    detach
@enduml
@startuml inline_umlgraph_1.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSE" as STSE
    
    activate HOST
    group stse_aes_ecb_encrypt
        
        HOST -> STSE : AES ECB encrypt (slot_number, plaintext)  
        Activate STSE
        return ciphertext

    end 
@enduml
@startuml inline_umlgraph_2.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSE" as STSE
    
    activate HOST
    group stse_aes_ecb_decrypt
        
        HOST -> STSE : AES ECB decrypt (slot_number, ciphertext)  
        Activate STSE
        return plaintext

    end 
@enduml
@startuml inline_umlgraph_3.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSE" as STSE
    
    activate HOST
    group stse_aes_ccm_encrypt
        
        HOST -> STSE : AES CCM* encrypt (slot_number, plaintext, associated_data, nonce, expected_mac_length)  
        Activate STSE
        return ciphertext, mac

    end 
@enduml
@startuml inline_umlgraph_4.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSE" as STSE
    
    activate HOST
    group stse_aes_ccm_decrypt
        
        HOST -> STSE : AES CCM* decrypt (slot_number, ciphertext, associated_data, nonce, mac)  
        Activate STSE
        return plaintext, verification result

    end 
@enduml
@startuml inline_umlgraph_5.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSE" as STSE
    
    activate HOST
    group stse_get_ecc_key_slots_count
        
        HOST -> STSE : query[private_key_table_info]
        Activate STSE
        return private key table info
        
        rnote over HOST
            return the key count
        end note 

    end 
@enduml
@startuml inline_umlgraph_6.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSE" as STSE
    
    activate HOST
    group stse_get_ecc_key_table_info
        
        HOST -> STSE : query[private_key_table_info]
        Activate STSE
        return private key table info
        
        rnote over HOST
            return private key table info
        end note 

    end 
@enduml
@startuml inline_umlgraph_7.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSE" as STSE
    
    activate HOST
    group stse_get_ecc_key_slot_info
        
        HOST -> STSE : query[private_key_table_info]
        Activate STSE
        return private key table info
        
        rnote over HOST
            search the requested slot in the table
        end note 
        
        rnote over HOST
            return private key slot info
        end note 

    end 
@enduml
@startuml inline_umlgraph_8.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSE" as STSE
    
    activate HOST
    group stse_generate_ECDHE_key_pair
        
        HOST -> STSE : generate ECDHE key pair(key_type)
        Activate STSE
        return public key

    end 
@enduml
@startuml inline_umlgraph_9.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSE" as STSE
    
    activate HOST
    group stse_generate_ecc_key_pair
        
        HOST -> STSE : generate ECC key pair(key_type)
        Activate STSE
        return public key

    end 
@enduml
@startuml inline_umlgraph_10.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSE" as STSE
    
    activate HOST
    group stse_write_generic_ecc_public_key
        
        HOST -> STSE : write generic public key(public_key)
        Activate STSE
        return status

    end 
@enduml
@startuml inline_umlgraph_11.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSAFE-Axxx" as STSAFE
    
    activate HOST
    group stsafe_data_storage_get_total_partition_count
        
        HOST -> STSAFE : Query "DATA PARTITION CONFIGURATION"  
        Activate STSAFE
        return Data partition configuration
        rnote over HOST
            extract Number of partition 
            from Data partition configuration
        end note
    end 
@enduml
@startuml inline_umlgraph_12.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSAFE-Axxx" as STSAFE
    
    activate HOST
    group stsafe_data_storage_get_partitioning_table
        
        HOST -> STSAFE : Query "DATA PARTITION CONFIGURATION"  
        Activate STSAFE
        return Data partition configuration
        rnote over HOST
            Populate applicative partitioning table
        end note
    end 
@enduml
@startuml inline_umlgraph_13.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSAFE-Axxx" as STSAFE
    
    activate HOST
    group stsafe_data_storage_read_zone

        loop until read length = 0 
        
            rnote over HOST
                prepare read chunk size and offset
            end note
            
            HOST -> STSAFE : read zone ( zone,chunk offset, chunk length)  
            Activate STSAFE
            return zone data chunk 

            rnote over HOST
                store chunk in Applicative read buffer
            end note
        end 

    end 
@enduml
@startuml inline_umlgraph_14.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSAFE-Axxx" as STSAFE
    
    activate HOST
    group stsafe_data_storage_update_zone
        
        rnote over HOST
            set update atomicity
        end note
        
        HOST -> STSAFE : update zone (zone, atomicity , offset, length , data)  
        Activate STSAFE
        return update status

    end 
@enduml
@startuml inline_umlgraph_15.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSAFE-Axxx" as STSAFE
    
    activate HOST
    group stsafe_data_storage_decrement_counter
            
            HOST -> STSAFE : decrement zone ( zone, amount , associated data, associated data length)  
            Activate STSAFE
            return new counter value 

            rnote over HOST
                store new counter value in 
                Applicative counter buffer
            end note

    end 
@enduml
@startuml inline_umlgraph_16.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSAFE-Axxx" as STSAFE
    
    activate HOST
    group stsafe_data_storage_read_counter

        loop until associated data read length = 0 
        
            rnote over HOST
                prepare read counter chunk size and offset
            end note
            
            HOST -> STSAFE : read zone ( zone, chunk offset, chunk length)  
            Activate STSAFE
            return counter value + zone data chunk 

            rnote over HOST
                store Counter value in 
                Applicative counter buffer
            end note

            rnote over HOST
                store chunk in Applicative read buffer
            end note
        end 

    end 
@enduml
@startuml inline_umlgraph_17.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSAFE-Axxx" as STSAFE
    
    activate HOST
    group stse_data_storage_change_read_access_condition

        rnote over HOST
            prepare change right
        end note 

        HOST -> STSAFE : read zone ( zone, change right, data offset, data length)  
        Activate STSAFE
        return zone data  

        rnote over HOST
            store read data in Applicative read buffer
        end note

    end 
@enduml
@startuml inline_umlgraph_18.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSAFE-Axxx" as STSAFE
    
    activate HOST
    group stsafe_data_storage_change_update_access_condition
        

            rnote over HOST
                set change right and update atomicity
            end note
            
            HOST -> STSAFE : update zone (zone, atomicity , offset, length , data)  
            Activate STSAFE
            return update status

    end 
@enduml
@startuml inline_umlgraph_19.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSAFE-Axxx" as STSAFE
    
    activate HOST
    group stse_data_storage_change_decrement_access_condition

        rnote over HOST
            prepare change right
        end note 

        HOST -> STSAFE : decrement zone ( zone, amount , associated data, associated data length)  
        Activate STSAFE
        return new counter value 

        rnote over HOST
            store new counter value in 
            Applicative counter buffer
        end note

    end 
@enduml
@startuml inline_umlgraph_20.png
HOST -> STSAFE : echo message
HOST <- STSAFE : echo message
@enduml
@startuml inline_umlgraph_21.png
HOST -> STSAFE : echo message
HOST <- STSAFE : echo message
@enduml
@startuml inline_umlgraph_22.png
    $stsafea_service_uml("stse_get_device_certificate","read","(zone 0,certificate size)","certificate")
@enduml
@startuml inline_umlgraph_23.png
HOST -> STSAFE : echo message
HOST <- STSAFE : echo message
@enduml
@startuml inline_umlgraph_24.png
HOST -> STSAFE : echo message
HOST <- STSAFE : echo message
@enduml
@startuml inline_umlgraph_25.png
HOST -> STSAFE : Verify password
HOST <- STSAFE : Verification status
HOST -> STSAFE : Put attributes[LCS] = Operationnal & locked
HOST <- STSAFE : Execution status
@enduml
@startuml inline_umlgraph_26.png
HOST -> STSAFE : Verify password
HOST <- STSAFE : Verification status
HOST -> STSAFE : Put attributes[LCS] = Operationnal
HOST <- STSAFE : Execution status
@enduml
@startuml inline_umlgraph_27.png
group stsafe_se_get_command_AC_count
	HOST -> STSAFE : Get attribute[Command AC]
	HOST <- STSAFE : Command AC list
	rnote over HOST : return only the length of the command list
end group
rnote over HOST : Length is used to initialize the buffer
group stsafe_se_get_command_AC
	HOST -> STSAFE : Get attribute[Command AC]
	HOST <- STSAFE : Command AC list
	rnote over HOST : return list in the buffer passed as argument
end group
@enduml
@startuml inline_umlgraph_28.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSE" as STSE
    
    activate HOST
    group stsafea_ecc_verify_signature
        
        HOST -> STSE : verify signature (public_key, signature, message, message_is_hashed)  
        Activate STSE
        return signature validity

    end 
@enduml
@startuml inline_umlgraph_29.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSE" as STSE
    
    activate HOST
    group stsafea_ecc_generate_signature
        
        HOST -> STSE : generate signature (slot_number, message)  
        Activate STSE
        return signature

    end 
@enduml
@startuml inline_umlgraph_30.png
    'Define participant (define order = display order left to right)
    participant "HOST" as HOST
    participant "STSE" as STSE
    
    activate HOST
    group stsafea_ecc_establish_shared_secret
        
        HOST -> STSE : establish shared secret (slot_number, remote_public_key)  
        Activate STSE
        return shared secret

    end 
@enduml
@startuml inline_umlgraph_31.png
	skinparam sequenceMessageAlign center
    Application -> Middleware: host_key_type\nhost_keys
    activate Middleware
alt Device == STSAFE-A120
	Middleware->STSAFE: Write host key plaintext
    activate STSAFE
    return status
else else
	Middleware->STSAFE: Put host key plaintext
    activate STSAFE
    return status
end
    Application <- Middleware: status
    deactivate Middleware
@enduml
@startuml inline_umlgraph_32.png
	skinparam sequenceMessageAlign center
    Application -> Middleware: key\nkey_info\nkek_ecc_key_type
    activate Middleware
    rnote over Middleware, STSAFE
		Start volatile KEK session
	end rnote
	rnote over Middleware
		KEK wrap key + key_info
	end rnote
	Middleware->STSAFE: Write symmetric key
    activate STSAFE
    return status
	rnote over Middleware, STSAFE
		Stop volatile KEK session
	end rnote
    Application <- Middleware: status
    deactivate Middleware
@enduml
@startuml inline_umlgraph_33.png
	skinparam sequenceMessageAlign center
    Application -> Middleware: ecc_key_type\nkey_info_list
    activate Middleware
    rnote over Middleware
		Format key information list
	end rnote
	rnote over Middleware
		Generate Middleware ECDHE Key pair 
        according to ecc_key_type
	end rnote
	Middleware->STSAFE: Generate ECDHE key pair
    activate STSAFE
    return STSAFE Ephemeral public key
    Middleware->STSAFE: Establish symmetric key
    activate STSAFE
    return status
	rnote over Middleware
		Diffie-Hellman -> shared secret (Z)
	end rnote
    rnote over Middleware
		Derive Z -> Output key material (OKM)
	end rnote
    rnote over Middleware
		MAC key information list
        with 1st key of OKM
	end rnote
    Middleware->STSAFE: Confirm symmetric key
    activate STSAFE
    return status
    rnote over Middleware
		Format the OKM in a key list
	end rnote
    Application <- Middleware: key list
    deactivate Middleware
@enduml
@startuml inline_umlgraph_34.png
	skinparam sequenceMessageAlign center
    Application -> Middleware: ecc_key_type\nkey_info_list
    activate Middleware
    rnote over Middleware
		Format key information list
	end rnote
	rnote over Middleware
		Generate Middleware ECDHE Key pair 
        according to ecc_key_type
	end rnote
	Middleware->STSAFE: Generate ECDHE key pair
    activate STSAFE
    return STSAFE Ephemeral public key
    Middleware->STSAFE: Establish symmetric key
    activate STSAFE
    return status
	rnote over Middleware
		Diffie-Hellman -> shared secret (Z)
	end rnote
    rnote over Middleware
		Derive Z -> Output key material (OKM)
	end rnote
    rnote over Middleware
		MAC key information list
        with 1st key of OKM
	end rnote
    Middleware->STSAFE: Confirm symmetric key
    activate STSAFE
    return status
    rnote over Middleware
		Format the OKM in a key list
	end rnote
    Application <- Middleware: key list
    deactivate Middleware
@enduml
